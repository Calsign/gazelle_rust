""" Gazelle module for Rust """

module(
    name = "gazelle_rust",
    version = "0.1.0",
    repo_name = "gazelle_rust",
)

### Go/Gazelle
bazel_dep(name = "rules_go", version = "0.48.0")
bazel_dep(name = "rules_proto", version = "6.0.2")
bazel_dep(name = "gazelle", version = "0.37.0")

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.22.4")
go_sdk.host()
go_sdk.nogo(nogo = "@//:nogo")

# Go dependencies
go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
use_repo(go_deps, "org_golang_google_protobuf")

### Rust
bazel_dep(name = "rules_rust", version = "0.46.0")

rust = use_extension("@rules_rust//rust:extensions.bzl", "rust")
rust.toolchain(edition = "2021")
use_repo(
    rust,
    "rust_toolchains",
)

register_toolchains("@rust_toolchains//:all")

# Rust dependencies
# crate = use_extension(
#     "@rules_rust//crate_universe:extension.bzl",
#     "crate",
# )

# crate.spec(
#     package = "cargo-lock",
#     version = "8.0.2",
# )
# crate.spec(
#     # NOTE: v4 is not available in no-std and by default, std is enabled in uuid
#     # so if this fails to build, then default_features default value is False
#     # see https://docs.rs/uuid/1.8.0/uuid/#embedded
#     features = ["v4"],
#     package = "uuid",
#     version = "1.8.0",
# )
# crate.from_specs()
# crate.from_cargo(
#     name = "crates",
#     cargo_lockfile = "//:cargo.lock",
#     manifests = [
#         "//macro:Cargo.toml",
#     ],
# )

# use_repo(crate, "crates")
